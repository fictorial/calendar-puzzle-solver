let sq = 45;
let border_width = 4;

let $c = document.querySelector('canvas');
let $date = document.getElementById('date')

let months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];

const labels = [
    ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
    ["Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    ["1","2","3","4","5","6","7"],
    ["8","9","10","11","12","13","14"],
    ["15","16","17","18","19","20","21"],
    ["22","23","24","25","26","27","28"],
    ["29","30","31"]
];

let colors = ['#ff6d6d','#ffb964','#faff76','#90ff7a','#5cf1ff','#609dff','#8771ff','#ff83ff'];
let ncolors = colors.length

let ctx = $c.getContext('2d');
$c.width = $c.height = 7*sq + 2*border_width;

$date.valueAsDate = new Date()
$date.addEventListener('change', () => {
    const date = $date.valueAsDate;
    drawsol(months[date.getMonth()], String(date.getDate() + 1));
});

const oob = (x,y) => (y<2 &&x>=6) || (y===6 && x>2) || y<0 || x<0;

function drawsol(m,d) {
    const k = `${m}-${d}`;
    let b = solutions[k];
    if (!b) {
        console.error('No solution for %s', k);
        return;
    }
    ctx.fillStyle = '#fff';
    ctx.fillRect(0,0,$c.width,$c.height);
    ctx.textAlign = 'center';
    ctx.font = `${parseInt(sq)/3}px sans-serif`;
    ctx.lineCap = "square";
    for (let y=0; y<7; ++y) {
        for (let x=0; x<7; ++x) {
            if (oob(x,y)) continue;
            let pno = b[y][x];
            if (pno === -1) {
                ctx.fillStyle = '#333'
                ctx.fillRect(x*sq,y*sq, sq,sq);
                ctx.fillStyle = 'white'
                ctx.fillText(labels[y][x], x*sq+sq/2, y*sq+sq/2+sq/8);
            } else {
                ctx.fillStyle = colors[pno % ncolors];
                ctx.fillRect(x*sq, y*sq, sq, sq);
            }
        }
    }

    ctx.strokeStyle = '#333';
    ctx.lineWidth = border_width;
    ctx.beginPath();
    ctx.moveTo(border_width/2,1);
    ctx.lineTo(sq*6, border_width/2);
    ctx.lineTo(sq*6, sq*2);
    ctx.lineTo(sq*7, sq*2);
    ctx.lineTo(sq*7, sq*6);
    ctx.lineTo(sq*3, sq*6);
    ctx.lineTo(sq*3, sq*7);
    ctx.lineTo(border_width/2, sq*7);
    ctx.lineTo(border_width/2, 1);
    ctx.stroke();

    ctx.beginPath();

    for (let y=1; y<7; ++y) {
        const cols = (y<2) ? 6 : y===6 ? 3 : 7;
        const row_width = sq*cols;

        for (let x=0; x<7; ++x) {
            if (oob(x,y)) continue;

            const above = b[y-1][x];
            const below = b[y][x];

            if (above != below) {
                ctx.moveTo(sq*x, sq*y);
                ctx.lineTo((x+1)*sq, sq*y)
            }
        }
    }

    for (let y=0; y<7; ++y) {
        const cols = (y<2) ? 6 : y===6 ? 3 : 7;
        const row_width = sq*cols;

        for (let x=1; x<7; ++x) {
            if (oob(x,y)) continue;

            const left = b[y][x-1];
            const right = b[y][x];

            if (left != right) {
                ctx.moveTo(sq*x, sq*y);
                ctx.lineTo(sq*x, (y+1)*sq)
            }
        }
    }

    ctx.stroke();
}

